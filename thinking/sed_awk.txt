
sed是处理文件的工具， 是对文本文件的 增删改查操作
	其中 查 是增删改的 前提， 也就是说 正则表达式 是操作的前提； 或者 行定位是 操作的前提；

sed 's/aabb/hello/' a.txt > b.txt; // 就是说 把a.txt 里面包含 aabb 的行 修改为 b.txt

宏观上： 处理哪个文件 处理完的数据 丢到哪个个文件？
微观上： 每一行应该怎么处理？ 正则表达式的编辑内容问题；

正则表达式 元字符 的三个 角度类型， 字符类型 字符出现的次数 字符出现的位置； 去描述一个子串！！！！！


=================================================================
sed 工作模式： 扫描文件 逐行处理 结果整体输出到默认的 标准设备里面

这个简单例子需要理解的是 ：
	> 修改了 sed的默认输出 因此不会显示在屏幕上 如果指定输出 文件 则会 输出修改的文件到标准输出里面；
	
直接看需求吧:
	修改 a 文件 把 结果保存到 b文件 
	sed 's/aabb/hello/' a.txt > b.txt;
	
	修改 a 文件 只把处理的行 结果保存到 b文件
	sed  -n 's/aabb/hello/p' a.txt > b.txt;
	
//如果不指定 -n 选项的 话 那么 满足条件的 修改行 将会被输出两次到指定的文件里面 
//基本上 工具选项-n 和  命令选项 都是搭配来使用的
	sed  's/aabb/hello/p' a.txt > b.txt;
	
	snail@ubuntu:~/rootfs/test_sed$ cat a.txt
	one:nimagea;aljdhs
	two:nimageb
	three:wangnalipao
	four:llllll

	snail@ubuntu:~/rootfs/test_sed$ sed 's/one/111/p' a.txt > b.txt
	snail@ubuntu:~/rootfs/test_sed$ ls
	a.txt  a.txt.bak  b.txt  one-np.txt  one-n.txt  one.txt
	snail@ubuntu:~/rootfs/test_sed$ cat b.txt 
	111:nimagea;aljdhs
	111:nimagea;aljdhs
	two:nimageb
	three:wangnalipao
	four:llllll

============================================================================
	删除满足条件的行 
	//这里是 先查找  后操作 和 s/aaa/1111/ 这个 先指定操作 后查找不一样 
	sed '/one/d'         
	
	=========================================================================
	sed -i 说明处理结果 替换当前的文本 也就是覆盖的方式
	
	sed -n 如果 后面没指定 > 输出文件 也就是使用sed的默认输出  到屏幕上
	-n 是指 nor print 不输出的意思
	因此 -n 和 > 同时输出 
	结果就是 处理结果 不输出 指定文件 只是 虚晃一枪罢了。 
	-n 是 不输出 而不是输出到哪里。 因此 指定文件是 没用的 
	
snail@ubuntu:~/rootfs/test_sed$ cat a.txt
one:nimagea;aljdhs
two:nimageb
three:wangnalipao
four:llllll

snail@ubuntu:~/rootfs/test_sed$ sed -n 's/one/111/' > bb.txt
^C
snail@ubuntu:~/rootfs/test_sed$ sed -n 's/one/111/' a.txt > bb.txt
snail@ubuntu:~/rootfs/test_sed$ cat -n bb.txt 
snail@ubuntu:~/rootfs/test_sed$ 

	以上: 
  shell 里面的  && ||
  如果失败 || 则 执行后面的
  如果成功 && 则 执行 后面的 
  这种模式 相当于 
  while ( && ) 这里的话 要看到 短路与 的优势啊
	====================================================================
	====================================================================
	AWK 是处理数据 和 生成报告的 工具  就是 unix下的 excel而已 
	现在研究  AWK 
	假设 有一个文件 需要把它进行 列处理呢?
	第一步 切割需要用到的 分隔符号 
	FS 分割符号
	NF 切割出来的 总数 
	NR 当前行
	$0 
	$n
	
	
	============================
	$0 就是当前行 也叫 field 
	理解 awk '{print $0}' /etc/passwd 
	相当于 cat /etc/passwd 
	======================
	
	格式： awk '条件 {动作}' filename
		动作支持 多个 分割符号 是 ; 分号
	类似于 if() {};的结构模型  其次 正则表达式也是 条件之一 
	因此 awk 也可以 筛选出 满足条件的字符串 内容 
snail@ubuntu:~/rootfs/awd_test$ cat test.txt 
Filesystem     1K-blocks     Used Available Use% Mounted on
udev              978248        0    978248   0% /dev
tmpfs             201756    11436    190320   6% /run
/dev/sda1       19525500 15492164   3018452  84% /
tmpfs            1008776      216   1008560   1% /dev/shm
tmpfs               5120        4      5116   1% /run/lock
tmpfs            1008776        0   1008776   0% /sys/fs/cgroup
tmpfs             201756       68    201688   1% /run/user/1000
/dev/sr0           71618    71618         0 100% /media/snail/VMware Tools
	=======================================
	输入切割， FS  输出也可以切割 OFS
	awk 支持脚本操作 
	========================================
	
	如果使用脚本 那么就开始了 awk的 模式
	BEAGING {
	
	}
	....
	等等 
	BEGIN   { x="0" } //确定 分隔符号 等等  
	/^$/    { x=x+1 } 
	END     { print "I found " x " blank lines. :)" } 
	就是这个架构 
	
	还有一个问题 : 分割符号 是以 行 来分割各个字段处理的 那么 怎么定义行？ 行符号保存在哪里？
	字段分隔符号 保存在 FS  行 分割符号 保存在 RS  对应的 也有输出 的 
	==================================
	
	有的时候可能需要持续输出某个进程在top命令中显示的信息，使用top命令的-b选项可以容易的将输出重定向到其他进程或者文件，配合-n选项指定top命令输出多少次就终止。
	awk '$2+$4 >= 0.2 {print $2,$4}' a.txt 
	没有 if 直接就是 表达式了 
	BEGIN   { FS=":";OFS="\t";...}等等 
===================================================================================	
