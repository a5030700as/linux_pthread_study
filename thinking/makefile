  makefile 
  先去理解 GCC G++编译器 这些 -c -o -I -l -g 相关的指令说明
  以及 静态库 动态库的 概念 
  
  然后再去看一下makefile 比较好一点
  
  =============================================================
  第一 通过mk可以修改linux内核的启动脚本 这个很重要
  
  第二 文件系统也是要挂载的 可以指定挂载的权限 比如只读
  
  =========================================================
  动态库？静态库？
  如何创建动态库？ 静态库？

========================================================================
使用ar r 创建 静态库
ar -r libtest.a my_add.o my_sub.o
结果：
libtest.a  main.c  main.o  Makefile  mian.c  my_add.c  my_add.o  my_sub.c  my_sub.o
然后
重新编译 main.c 连接时候 指定链接库 相当于 指定 .o这样而已 

方式1：指定连接库名称 
	gcc -c main.c
	gcc -o main main.o libtest.a 
方法二： 指定路径 指定库
	gcc -o main main.o -L. -ltest
如果使用 -l小写 那么就是 要去掉 前缀 和 后缀了

=======================================================
===================================================================================
现在实验动态库

共享库 使用的格式 和 m进程格式 也就是 ELF格式
可以看成是一个 小 线程了 
编译的时候 需要了解 两步  一个是 位置无关码的编译选项，运行时候的加载

gcc -fPIC my_sub.c my_add.c -shared -o libtest.so //一句话实现 不分步

gcc -o main main.o libtest.so //可以成功 

尝试着运行 ./main 
发现报错：
	./main: error while loading shared libraries: libtest.so: cannot open shared object file: No such file or directory
-------------------------------------------------------
因为 只是 生成了 动态库  
但是 没有告知 动态连接器 
让程序 在运行的时候去连接 加载函数

方法 一： 把库放到 动态链接库的 默认目录 /lib 或者 /usr/lib 
方法 二： 追加 当前目录 到动态链接器的 默认目录表 中 （修改动态连接器的 环境变量 自己创建 LD_LIBRARY_PATH）
方法 三： 编译的时候 指定连接库目录  和 库文件 -Ldir -lname
 
 编译时候 指定路径 使用-wl，-rpath= 来指定动态库的搜索路径
 
-------------------------------------
	gcc -o main main.o -L. -ltest
	./main: error while loading shared libraries: libtest.so: cannot open shared object file: No such file or directory
	ldd main >>
	linux-vdso.so.1 (0x00007ffe7db10000)
	libtest.so => not found
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fda8d7d7000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fda8dbc8000)

===============================================================================
总而言之： 
	动态库的实现是： 
	制作动态库：
	需要使用 位置无关码的方式(相对跳转) 生成 动态库 -fPIC选项
	
	使用动态库：
	编译的时需要指定 动态库，
	运行程序时候 需要确定 动态链接器 可以找到 动态库的位置 （ 也就是 要么 把动态库 放到指定的地点 要么给动态库创建一个环境变量 ）
=============================================================================

综上所述： 
  需要区分 你是创建库 (往库里添加 .o文件) 还是 使用 库
  
  ================================================================================================================
  
 
